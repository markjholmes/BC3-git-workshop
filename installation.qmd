---
title: "Introduction to GitHub for collaborative projects"
author: Luis Javier Chueca, Mark Holmes
date: today
format: 
  revealjs:
    logo: WS-slides/media/image3.png
    theme: presentation-theme-bc3.scss
    monofont: "Cascadia Code"
    slide-number: true
    auto-stretch: false
    css: style.css
number-sections: true
code-line-numbers: false
code-copy: true
toc: true
toc-depth: 1
code-overflow: wrap
---

https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control

# What is Git?

:::: {.columns}


::: {.column width="70%"}
> **Linus Torvalds: (creator)**
> 
> *"git" can mean anything, depending on your mood.*
> 
> - *random three-letter combination that is pronounceable, and not actually used by any common UNIX command*
> - *stupid. contemptible and despicable. simple.*
> - *"global information tracker"*
> - *"goddamn idiotic truckload of sh\*t"*

:::

::: {.column width="30%"}
![](https://logowik.com/content/uploads/images/git6963.jpg){fig-align="center"}
:::

::::

:::{.footer}
Image source: logowik.com
:::

# Why use Git?

![](WS-slides/media/image46.png){fig-align="center"}

:::{.footer}
Image source: Luis Javier Chueca
:::

# The key ideas of Git

# Hosting on GitHub

## Creating an account on GitHub

1. Navigate to [github.com](https://github.com/)
2. Click Sign up
3. Follow the prompts to create your personal account

## Create a repository



# Installing Git

## Install Git on Windows ![](https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Windows_logo_-_2012.svg/1024px-Windows_logo_-_2012.svg.png){.center}

:::{.center-y}

| \# | What | Commands |
| :---: | --- | --- |
| 1 | Install using Powershell | ```winget install -e --id Git.Git``` |
| 2 | Open git bash | |
| 3 | Verify install | ```git --version``` |
| 4 | Configure username | ```git config --global user.name "My Name"``` |
| 5 | Configure email | ```git config --global user.email "me@email.com"``` |

: {.striped .hover tbl-colwidths="[5,20,75]"}

:::

:::{.footer}
Image source: wikimedia.org
:::

## Install Git on Mac OS ![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Apple_logo_white.svg/1724px-Apple_logo_white.svg.png){.center}

:::{.center-y}

| \# | What | Commands |
| :---: | --- | --- |
| 1 | Install via MacPorts | ```sudo port install git``` |
| 2 | Verify install | ```git --version``` |
| 3 | Configure username | ```git config --global user.name "My Name"``` |
| 4 | Configure email | ```git config --global user.email "me@email.com"``` |

: {.striped .hover tbl-colwidths="[5,20,75]"}

:::

:::{.footer}
Image source: wikimedia.org
:::

## Install Git on Linux/WSL: Debian / Ubuntu ![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/1727px-Tux.svg.png){.center}

:::{.center-y}

| \# | What | Commands |
| :---: | --- | --- |
| 1 | Prepare to install | ```sudo apt-get update``` |
| 2 | Install | ```sudo apt-get install git``` |
| 3 | Verify install | ```git --version``` |
| 4 | Configure username | ```git config --global user.name "My Name"``` |
| 5 | Configure email | ```git config --global user.email "me@email.com"``` |

: {.striped .hover tbl-colwidths="[5,20,75]"}

:::

:::{.footer}
Image source: wikimedia.org
:::

# Terminal vs UI

## Comparison

::::{.center-y}

| Terminal | UI |
| :---: | :---: |
| harder to get started | easier to use |
| more dangerous | generally safer |
| can do more complicated operations | less functionality |

: {tbl-colwidths="[50,50]"}

::: {.callout-tip appearance="minimal"}
**Use the UI for general tasks but be familiar with the terminal in case of problems**
:::

::::

# Basic commands for git usage:

::: {.columns}

::: {.column}
**Essential**

1. `git clone`
2. `git add`
3. `git commit`
4. `git push`
5. `git pull`
:::

::: {.column}
**Good**

6. `git rm` and `git rm --cached`
7. `git branch`
8. `git request-pull`
9. `git merge` 
10. `git status`
11. `git clean`
12. `git stash` and `git stash apply`
:::

:::

[Git Cheat Sheet](https://education.github.com/git-cheat-sheet-education.pdf)

## Essentials

1. `git clone`: get a remote repository and put it on your machine
2. `git add`: add a file to version control
3. `git commit`: create a new version of the repository incorporating your changes
4. `git push`: send your changes to the remote repository
5. `git pull`: get remote changes to the repository

## Good to know

6. `git rm` and `git rm --cached`: remove files entirely or just from version control
7. `git branch`: create a separate branch of the repository to work on a new idea
8. `git request-pull`: add your changes to the remote repository the nice way 
9. `git merge`: add your changes to the remote repository the hard way
10. `git status`: see what's happening locally
11. `git clean`: remove any files that aren't under version control
12. `git stash` and `git stash apply`: temporarily put your changes to one side to resolve version control issues and then re-apply them once it's sorted

# `request-pull` vs `merge`

"Hey guys! Please look at this, see whether it looks good, and confirm the request if it is"

"Hey guys! Here is my code, whether you like it or not"

# Exercises

open 

navigate to a folder

```{bash}
cd path/to/dir
```

clone the repo

```{bash}
git clone github.com/markjholmes/test-repo.git
```

## Exercise 1

- Rodrigo and Lucille want to collaborate on a repository
- The repository is hosted at github.com/RECODYN/repo
- Inside this are two files
  - data.r
  - analysis.r 
- Lucille wants to fix some errors in how the data is being downloaded and computed
- Rodrigo wants to change the statistical test

**What do they do?**

:::{.callout-tip title="Lucille"}
```shell
git clone github.com/RECODYN/repo.git
cd repo
git checkout -b lucille-data-fix
```

lucille makes her changes to data.r. nothing structural changes

```shell
git add data.r 
git commit -m "updated data download link"
git push

```

:::

:::{.callout-tip title="Rodrigo"}
:::

## Exercise 2

# Creating a new repository

[Creating a repo](https://docs.github.com/en/repositories/creating-and-managing-repositories/creating-a-new-repository)

1. Short and concise name
2. Avoid special characters and white spaces
3. Select between `public` or `private`
4. Add `.gitignore`and select `R`
5. Edit `README`

# Cloning a repository

On GitHub repository go to `Code` -> `Copy to clipboard`

Link the repository to `RStudio` / `Visual Studio Code` / Others

On RStudio:
  - `File`: `New Project`: `Version Control`: `Git`
  - Paste `URL` and insert `Project directory name`
  - `Create Project`

# Git with R

![](https://upload.wikimedia.org/wikipedia/commons/thumb/1/1b/R_logo.svg/991px-R_logo.svg.png){fig-align="center"}

:::{.footer}
Image source: wikimedia.org
:::